AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  samaggi-games-admin

  Sample SAM Template for samaggi-games-admin

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 29
    Runtime: python3.9
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"


Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            Auth:
              ApiKeyRequired: true

  CheckClash:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.sport_clash
      Events:
        CheckClash:
          Type: Api
          Properties:
            Path: /check-clash
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  PlayerValid:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.is_player_valid
      Events:
        PlayerValid:
          Type: Api
          Properties:
            Path: /player-valid
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  TeamExistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.team_exists
      Events:
        TeamExists:
          Type: Api
          Properties:
            Path: /team-exists
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  DataStatistics:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.data_statistics
      Events:
        TeamExists:
          Type: Api
          Properties:
            Path: /data-statistics
            Method: get
            Auth:
              ApiKeyRequired: true
              DefaultAuthorizer: SSGamesAPIAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"


  AddPlayer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.add_player
      Events:
        AddPlayer:
          Type: Api
          Properties:
            Path: /add-player
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  SaveAddress:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.save_address
      Events:
        SaveAddress:
          Type: Api
          Properties:
            Path: /save-address
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  DeletePlayer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.delete_player
      Events:
        DeletePlayer:
          Type: Api
          Properties:
            Path: /delete-player
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  GetTable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_table
      Events:
        GetTable:
          Type: Api
          Properties:
            Path: /get-table
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
        - S3FullAccessPolicy:
            BucketName: "*"

  GetTableFiltered:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_table_v2
      Events:
        GetTableFiltered:
          Type: Api
          Properties:
            Path: /get-table-filtered
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  GetSports:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_sports
      Events:
        GetSports:
          Type: Api
          Properties:
            Path: /get-sports
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  CheckCode:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.check_code
      Events:
        CheckCode:
          Type: Api
          Properties:
            Path: /check-code
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  EditContact:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.edit_contact
      Events:
        EditContactAPI:
          Type: Api
          Properties:
            Path: /edit-contact
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  WriteSpectator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.write_spectator
      Events:
        WriteSpectatorAPI:
          Type: Api
          Properties:
            Path: /write-spectator
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  DisqualifyTeams:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.disqualify_teams
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  GetPaymentCode:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_payment_code
      Events:
        WriteSpectatorAPI:
          Type: Api
          Properties:
            Path: /get-payment-code
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  GetPlayerID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.get_player_id
      Events:
        GetPlayerID:
          Type: Api
          Properties:
            Path: /get-player-id
            Method: get
            Auth:
              ApiKeyRequired: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"

  SSGamesAPIUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SSGamesAPIUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  SSGamesAPIUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SSGamesAPIUserPool
      ClientName: SSGamesAPI
      GenerateSecret: false

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  AddPlayerGateway:
    Description: "API Gateway for AddPlayer"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/add-player/"
  AddPlayerFunction:
    Description: "ARN for AddPlayer"
    Value: !GetAtt AddPlayer.Arn
  AddPlayerIam:
    Description: "The IAM Role for AddPlayer"
    Value: !GetAtt AddPlayer.Arn
  DeletePlayerGateway:
    Description: "API Gateway for DeletePlayer"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete-player/"
  DeletePlayerFunction:
    Description: "ARN for DeletePlayer"
    Value: !GetAtt DeletePlayer.Arn
  DeletePlayerIam:
    Description: "The IAM Role for DeletePlayer"
    Value: !GetAtt DeletePlayer.Arn
  GetTableGateway:
    Description: "API Gateway for GetTable"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get-table/"
  GetTableFunction:
    Description: "ARN for GetTable"
    Value: !GetAtt GetTable.Arn
  GetTableIam:
    Description: "The IAM Role for GetTable"
    Value: !GetAtt GetTable.Arn
  GetPlayerIDGateway:
    Description: "API Gateway for GetPlayerID"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get-player-id/"
  GetPlayerIDFunction:
    Description: "ARN for GetPlayerID"
    Value: !GetAtt GetPlayerID.Arn
  GetPlayerIDIam:
    Description: "The IAM Role for GetPlayerID"
    Value: !GetAtt GetPlayerID.Arn

